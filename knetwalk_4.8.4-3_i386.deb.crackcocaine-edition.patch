diff --git a/abstractgrid.cpp b/abstractgrid.cpp
index 63ed8b8..444c4be 100644
--- a/abstractgrid.cpp
+++ b/abstractgrid.cpp
@@ -25,6 +25,8 @@
 
 AbstractCell::AbstractCell(int index)
     : m_index(index)
+    , m_BorderOfGrid(NotBorder)
+    , m_CorrespondingColumnOrRow(0)
 {
     makeEmpty();
 }
@@ -49,6 +51,12 @@ char *AbstractCell::toString() {
     return str;
 }
 
+void AbstractCell::setBorderPositionInGrid(AbstractCell::BorderOfGridEnum whichBorderOfGrid, uint correspondingColumnOrRow)
+{
+    m_BorderOfGrid = whichBorderOfGrid;
+    m_CorrespondingColumnOrRow = correspondingColumnOrRow;
+}
+
 bool AbstractCell::isTerminal() const
 {
     return (m_cables == Up || m_cables == Right
@@ -137,11 +145,45 @@ void AbstractGrid::initializeGrid(uint width, uint height, Wrapping wrapping)
         qDeleteAll(m_cells);
         m_cells.clear();
 
-        for (uint index = 0; index < width*height; ++index) {
+        uint index = 0;
+        for (index = 0; index < width*height; ++index) {
             m_cells.append(newCell(index));
         }
+
+        index = 0;
+        for (uint currentHeight = 0; currentHeight < height; ++currentHeight) {
+            for (uint currentWidth = 0; currentWidth < width; ++currentWidth) {
+                AbstractCell *theCell = m_cells.at(index);
+                ++index;
+
+                if(isCornerCell(currentHeight, currentWidth, height, width))
+                    continue;
+
+                if(currentWidth == 0)
+                {
+                    //left
+                    theCell->setBorderPositionInGrid(AbstractCell::LeftBorder, currentHeight);
+                }
+                if(currentWidth == (width-1))
+                {
+                    //right
+                    theCell->setBorderPositionInGrid(AbstractCell::RightBorder, currentHeight);
+                }
+                if(currentHeight == 0)
+                {
+                    //top
+                    theCell->setBorderPositionInGrid(AbstractCell::TopBorder, currentWidth);
+                }
+                if(currentHeight == (height-1))
+                {
+                    //bottom
+                    theCell->setBorderPositionInGrid(AbstractCell::BottomBorder, currentWidth);
+                }
+            }
+        }
     }
 
+
     m_width = width;
     m_height = height;
     m_isWrapped = wrapping;
@@ -464,6 +506,23 @@ bool AbstractGrid::movesDoneArePossible()
     return true;
 }
 
+bool AbstractGrid::isCornerCell(uint currentHeight, uint currentWidth, uint height, uint width)
+{
+    //top left
+    if(currentHeight == 0 && currentWidth == 0)
+        return true;
+    //top right
+    if(currentHeight == 0 && currentWidth == (width-1))
+        return true;
+    //bottom left
+    if(currentHeight == (height-1) && currentWidth == 0)
+        return true;
+    //bottom right
+    if(currentHeight == (height-1) && currentWidth == (width-1))
+        return true;
+    return false;
+}
+
 bool AbstractGrid::hasUnneededCables()
 {
     foreach (AbstractCell *cell, m_cells) {
diff --git a/abstractgrid.h b/abstractgrid.h
index ddd9911..c0af0c1 100644
--- a/abstractgrid.h
+++ b/abstractgrid.h
@@ -55,6 +55,11 @@ public:
     // used for debugging only
     char *toString();
     
+    enum BorderOfGridEnum { NotBorder, TopBorder, LeftBorder, RightBorder, BottomBorder };
+    void setBorderPositionInGrid(BorderOfGridEnum whichBorderOfGrid, uint correspondingColumnOrRow);
+protected:
+    BorderOfGridEnum m_BorderOfGrid;
+    uint m_CorrespondingColumnOrRow;
 private:
     int m_index;
     Directions originalCables;
@@ -158,6 +163,8 @@ private:
     
     // return false if some of the moves done are clearly wrong
     bool movesDoneArePossible();
+
+    bool isCornerCell(uint currentHeight, uint currentWidth, uint height, uint width);
 };
 
 #endif // ABSTRACT_GRID
diff --git a/cell.cpp b/cell.cpp
index 7555e1d..2bdd5cf 100644
--- a/cell.cpp
+++ b/cell.cpp
@@ -21,6 +21,10 @@
 
 #include <QTimeLine>
 #include <QPen>
+#include <QPainter>
+#include <QStyleOptionGraphicsItem>
+#include <QWidget>
+#include <QRectF>
 #include <KGameRenderedItem>
 #include <KColorUtils>
 
@@ -33,12 +37,11 @@ Cell::Cell(QGraphicsItem* parent, int index)
     : QGraphicsRectItem(parent), AbstractCell(index), m_cablesItem(NULL), m_hostItem(NULL),
       m_hidden(false), m_locked(false), m_activated(false)
 {
-    setPen(QPen(Qt::transparent));
-
     timeLine = new QTimeLine(AnimationTime, this);
     timeLine->setCurveShape(QTimeLine::EaseOutCurve);
     timeLine->setUpdateInterval(30);
     connect(timeLine, SIGNAL(frameChanged(int)), SLOT(rotateStep(int)));
+    connect(timeLine, SIGNAL(finished()), SLOT(handleTimelineFinished()));
 }
 
 void Cell::makeEmpty()
@@ -169,6 +172,11 @@ void Cell::rotateStep(int a)
     }
 }
 
+void Cell::handleTimelineFinished()
+{
+    setLocked(true);
+}
+
 
 void Cell::setSize(const QSizeF& size)
 {
@@ -184,6 +192,46 @@ void Cell::setSize(const QSizeF& size)
     }
 }
 
+void Cell::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget)
+{
+    QGraphicsRectItem::paint(painter, option, widget);
+
+    //color hints (TODO optional: turn off for all but very hard mode)
+    if(m_BorderOfGrid != AbstractCell::NotBorder)
+    {
+        painter->save();
+
+        QPen myPen;
+        myPen.setWidth(3);
+        if(m_BorderOfGrid == AbstractCell::LeftBorder)
+        {
+            myPen.setColor(getHorizontalColor(m_CorrespondingColumnOrRow));
+            painter->setPen(myPen);
+            painter->drawLine(boundingRect().left()+1, boundingRect().top(), boundingRect().left()+1, boundingRect().bottom());
+        }
+        else if(m_BorderOfGrid == AbstractCell::RightBorder)
+        {
+            myPen.setColor(getHorizontalColor(m_CorrespondingColumnOrRow));
+            painter->setPen(myPen);
+            painter->drawLine(boundingRect().right()-1, boundingRect().top(), boundingRect().right()-1, boundingRect().bottom());
+        }
+        else if(m_BorderOfGrid == AbstractCell::BottomBorder)
+        {
+            myPen.setColor(getVerticalColor(m_CorrespondingColumnOrRow));
+            painter->setPen(myPen);
+            painter->drawLine(boundingRect().left(), boundingRect().bottom()-1, boundingRect().right(), boundingRect().bottom()-1);
+        }
+        else if(m_BorderOfGrid == AbstractCell::TopBorder)
+        {
+            myPen.setColor(getVerticalColor(m_CorrespondingColumnOrRow));
+            painter->setPen(myPen);
+            painter->drawLine(boundingRect().left(), boundingRect().top()+1, boundingRect().right(), boundingRect().top()+1);
+        }
+
+        painter->restore();
+    }
+}
+
 QHash<int, QByteArray> Cell::fillNameHash()
 {
     QHash<int, QByteArray> directionNames;
@@ -204,4 +252,80 @@ QHash<int, QByteArray> Cell::fillNameHash()
     return directionNames;
 }
 
+QColor Cell::getHorizontalColor(uint row)
+{
+    switch(row)
+    {
+    case 0:
+        return QColor(Qt::red);
+        break;
+    case 1:
+        return QColor(Qt::green);
+        break;
+    case 2:
+        return QColor(Qt::blue);
+        break;
+    case 3:
+        return QColor(Qt::yellow);
+        break;
+    case 4:
+        return QColor(Qt::cyan);
+        break;
+    case 5:
+        return QColor(Qt::white);
+        break;
+    case 6:
+        return QColor(Qt::black);
+        break;
+    case 7:
+        return QColor(Qt::magenta);
+        break;
+    case 8:
+        return QColor(Qt::gray);
+        break;
+    default:
+        return QColor(Qt::red);
+        break;
+    }
+    return QColor(Qt::red);
+}
+
+QColor Cell::getVerticalColor(uint column)
+{
+    switch(column)
+    {
+    case 4:
+        return QColor(Qt::red);
+        break;
+    case 5:
+        return QColor(Qt::green);
+        break;
+    case 6:
+        return QColor(Qt::blue);
+        break;
+    case 7:
+        return QColor(Qt::yellow);
+        break;
+    case 8:
+        return QColor(Qt::cyan);
+        break;
+    case 1:
+        return QColor(Qt::white);
+        break;
+    case 2:
+        return QColor(Qt::black);
+        break;
+    case 3:
+        return QColor(Qt::magenta);
+        break;
+    case 0:
+        return QColor(Qt::gray);
+        break;
+    default:
+        return QColor(Qt::red);
+        break;
+    }
+    return QColor(Qt::red);
+}
+
 #include "cell.moc"
diff --git a/cell.h b/cell.h
index 9254935..788f5f2 100644
--- a/cell.h
+++ b/cell.h
@@ -21,6 +21,7 @@
 #define CELL_H
 
 #include <QGraphicsRectItem>
+#include <QColor>
 
 
 #include "abstractgrid.h"
@@ -28,6 +29,9 @@
 class QTimeLine;
 class QMouseEvent;
 class QResizeEvent;
+class QPainter;
+class QStyleOptionGraphicsItem;
+class QWidget;
 class KGameRenderedItem;
 
 class Cell : public QObject, public QGraphicsRectItem, public AbstractCell
@@ -50,10 +54,13 @@ public:
     void setActivated(bool activate);
 
     void setSize(const QSizeF& size);
+
+    virtual void paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *widget);
 private slots:
     // used by the animation
     // angle is relative to angleStart
     void rotateStep(int angle);
+    void handleTimelineFinished();
 
 signals:
     void connectionsChanged();
@@ -74,6 +81,9 @@ private:
     
     // used by the animation of the rotation
     QTimeLine *timeLine;
+
+    static QColor getHorizontalColor(uint row);
+    static QColor getVerticalColor(uint column);
 };
 
 #endif
diff --git a/fielditem.cpp b/fielditem.cpp
index 44ee79a..1b6896b 100644
--- a/fielditem.cpp
+++ b/fielditem.cpp
@@ -221,13 +221,13 @@ void FieldItem::activateCell(int index)
         return;
     }
 
-    if(m_activeCell >= 0 && m_activeCell < cellCount()) {
-        cellAt(m_activeCell)->setActivated(false);
-    }
+    //if(m_activeCell >= 0 && m_activeCell < cellCount()) {
+    //    cellAt(m_activeCell)->setActivated(false);
+    //}
     m_activeCell = index;
-    if(m_activeCell >= 0 && m_activeCell < cellCount()) {
-        cellAt(m_activeCell)->setActivated(true);
-    }
+    //if(m_activeCell >= 0 && m_activeCell < cellCount()) {
+    //    cellAt(m_activeCell)->setActivated(true);
+    //}
 }
 
 int FieldItem::indexFromPos(const QPointF& pos)
